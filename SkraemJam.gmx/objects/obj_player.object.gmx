<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>obj_collision_character</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key_up = 0;
key_down = 0;
key_right = 0;
key_left = 0;
key_rotate_CW = 0;
key_rotate_CCW = 0;
key_attack = 0;

light_intensity = 0;

dir = 0.0;
color = c_red;

movement_speed = 3.5
rotation_speed = 0.1

move_collision_radius = 16;

max_hp = 500.0;
hp = max_hp;
alive = true;

ammo_count = 5;

facing = -1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(alive &amp;&amp; obj_main.state == 1) {
    var delta_x = (keyboard_check(key_right) - keyboard_check(key_left)) * movement_speed;
    var delta_y = (keyboard_check(key_down) - keyboard_check(key_up)) * movement_speed;
    
    if (!place_meeting(x + delta_x, y, obj_collision_parent)) {
        x += delta_x;
    }
    if (!place_meeting(x, y + delta_y, obj_collision_parent)) {
        y += delta_y;
    }
    
    
    //dir += (keyboard_check(key_rotate_CW) - keyboard_check(key_rotate_CCW)) * rotation_speed
    
    dir -= degtorad(-angle_difference(radtodeg(-dir), radtodeg(-facing))) * 0.1;
    
    if (delta_x &gt; 0) facing = degtorad(-0);
    if (delta_x &lt; 0) facing = degtorad(-180);
    if (delta_y &gt; 0) facing = degtorad(-270);
    if (delta_y &lt; 0) facing = degtorad(-90);
    
    if (delta_x &gt; 0 &amp;&amp; delta_y &gt; 0) {
        facing = degtorad(-315);
    }
    
    if (delta_x &lt; 0 &amp;&amp; delta_y &lt; 0) {
        facing = degtorad(-135);
    }
    
    if (delta_x &gt; 0 &amp;&amp; delta_y &lt; 0) {
        facing = degtorad(-45);
    }
    
    if (delta_x &lt; 0 &amp;&amp; delta_y &gt; 0) {
        facing = degtorad(-225);
    }
    
    var in_light = false;
    with (obj_spotlight) {
        if (point_distance(x, y, other.x, other.y) &lt; 480) {
            in_light = true;
            break;
        }
    }
        
    if (!in_light) light_intensity += 0.02; else light_intensity -= 0.04;
    light_intensity = clamp(light_intensity, 0, 1);
    
    if(ammo_count &gt; 0 &amp;&amp; keyboard_check_pressed(key_attack)) {
        with (instance_create(x, y, obj_projectile)) {
            dir = other.dir;
            image_angle = radtodeg(-dir);
        }
        ammo_count--;
    }
    
    hp = min(hp + 0.25, max_hp);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_ammo_pickup">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(other) {
    ds_list_add(obj_main.available_ammo_spawns, spawner);
    instance_destroy();
}

ammo_count += 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_collision_character">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>push_other_character();

if(other.object_index == obj_clown) {
    if(--hp &lt; 0) {
        alive = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(alive) {
    //draw_sprite_ext(spr_crosshair, 0, round(x - view_xview) + cos(dir) * 30, round(y - view_yview) + sin(dir) * 30, 1, 1, radtodeg(-dir), color, 1);
        
    var h = 6;
    var w = 40;
    var dy = 24;
    var sx = floor(x - view_xview - floor(w * 0.5));
    var sy = floor(y - view_yview - dy - h);
    
    draw_set_color(make_color_rgb(90, 90, 90));
    draw_set_alpha(0.75);
    draw_rectangle(sx, sy, sx + w, sy + h, false);
    draw_set_alpha(1.0);
    draw_set_color(merge_color(c_red, c_green, hp / max_hp));
    draw_rectangle(sx, sy, sx + floor(w * (hp / max_hp)), sy + h, false);
    
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text_transformed(x - view_xview, y - view_yview - 40, "Ammo: " + string(ammo_count), 0.1, 0.1, 0.0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(alive) {
    draw_sprite_ext(spr_player, 0, x, y, 1, 1, radtodeg(-dir), c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
