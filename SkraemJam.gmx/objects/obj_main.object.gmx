<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>application_surface_enable(false);

window_set_fullscreen(true);

state = 0
state_timer = 0

ammo_timer = 0

wave_current = 0
wave_enemy_count = 0

available_ammo_spawns = ds_list_create();

screenshake_timer = 0;

sf_blood = -1;

player_0 = instance_create(0, 0, obj_player);
with (player_0) {
    key_up = vk_up;
    key_down = vk_down;
    key_right = vk_right;
    key_left = vk_left;
    key_rotate_CW = 190;
    key_rotate_CCW = 188;
    key_attack = vk_control;
    color = c_red;
}

player_1 = instance_create(0, 0, obj_player);
with (player_1) {
    key_up = ord('W');
    key_down = ord('S');
    key_right = ord('D');
    key_left = ord('A');
    key_rotate_CW = ord('V');
    key_rotate_CCW = ord('C');
    key_attack = ord("1");
    color = c_blue;
}

var spawn_index = 0;
with(obj_player) {
    var ang = (spawn_index / instance_number(obj_player)) * 360;
    dir = degtorad(ang + 180);
    x = room_width * 0.5 + dcos(ang) * 150;
    y = room_height * 0.5 + dsin(ang) * 150;
    
    spawn_index++;
}

view_wview = display_get_width();
view_hview = display_get_height();

sf_light = -1;

random_set_seed(1000);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var aspect_ratio = display_get_width() / display_get_height()

view_wview = abs(player_0.x - player_1.x) + 200.0
view_hview = abs(player_0.y - player_1.y) + 200.0

view_wview = round(max(view_wview, display_get_width()))
view_hview = round(max(view_hview, display_get_height()))

if(view_wview / view_hview &lt; aspect_ratio) {
    view_wview = round(view_hview * aspect_ratio)
}
else {
    view_hview = round(view_wview / aspect_ratio)
}

view_xview = round((player_0.x + player_1.x) * 0.5 - view_wview * 0.5);
view_yview = round((player_0.y + player_1.y) * 0.5 - view_hview * 0.5);

if (keyboard_check(vk_escape)) game_end();

var init_game = false;

if(state == 0) {
    if(keyboard_check(vk_anykey)) {
        state = 2;
        init_game = true;
        state_timer = 0;
    }
}
else if(state == 1) {
    if(!player_0.alive &amp;&amp; !player_1.alive) {
        state = 4;
        state_timer = 0
    }
    else if(instance_number(obj_clown) == 0 &amp;&amp; wave_enemy_count &lt;= 0) {
        state = 2;
        state_timer = 0;
    }
    else {
        // Spawn ammo periodically
        if (ammo_timer-- &lt;= 0) {
            // Spawn ammo
            var ammo_to_spawn = 2;
            for(var j = 0; j &lt; ammo_to_spawn; j++) {
                var best_spawner_index = -1;
                var max_dist = 0;
                for(var i = 0; i &lt; ds_list_size(available_ammo_spawns); i++) {
                    var ammo_spawn = ds_list_find_value(available_ammo_spawns, i);
                    var dist = point_distance(player_0.x, player_0.y, ammo_spawn.x, ammo_spawn.y) + point_distance(player_1.x, player_1.y, ammo_spawn.x, ammo_spawn.y);
                    if(dist &gt; max_dist) {
                        best_spawner_index = i;
                    }
                }
                
                if(best_spawner_index &gt;= 0) {
                    var ammo_spawn = ds_list_find_value(available_ammo_spawns, best_spawner_index);
                    var pickup = instance_create(ammo_spawn.x, ammo_spawn.y, obj_ammo_pickup);
                    pickup.spawner = ammo_spawn;
                    ds_list_delete(available_ammo_spawns, best_spawner_index);
                }
            }
            ammo_timer = room_speed * (3.0 + random(5.0))
        }
    }
}
else if(state == 2) {
    if(++state_timer &gt;= room_speed * 3) {
        state = 1;
        
        // Setup next wave
        wave_current++;
        wave_enemy_count = wave_current * 5;
    }   
}
else if(state == 4) {
    if(++state_timer &gt;= room_speed * 2) {
        state = -4;
    }
}
else if(state == -4) {
    if(keyboard_check(vk_anykey)) {
        state = 2;
        init_game = true;
        state_timer = 0;
    }
}

if(init_game) {
    wave_current = 0;

    with(obj_clown) {
        instance_destroy();
    }
    
    with(obj_ammo_pickup) {
        instance_destroy();
    }
    
    ds_list_clear(obj_main.available_ammo_spawns);
    with (obj_ammo_spawn) {
        ds_list_add(obj_main.available_ammo_spawns, id);
    }
    
    with(obj_spotlight) {
        x = xstart;
        y = ystart;
    }
    
    var spawn_index = 0;    
    with(obj_player) {
        alive = true;
        hp = max_hp;
        light_intensity = 0;
        
        var ang = (spawn_index / instance_number(obj_player)) * 360;
        facing = degtorad(ang + 180);
        dir = facing;
        x = room_width * 0.5 + dcos(ang) * 150;
        y = room_height * 0.5 + dsin(ang) * 150;
        
        spawn_index++;
    }
}

if (screenshake_timer &gt; 0) {
    screenshake_timer--;
    
    var t = screenshake_timer;
    
    view_xview += irandom_range(-t, t);
    view_xview += irandom_range(-t, t);
    view_angle = irandom_range(-t * 0.1, t * 0.1);
}

if (!surface_exists(sf_blood)) {
    sf_blood = surface_create(room_width, room_height);
    surface_set_target(sf_blood);
        draw_clear_alpha(c_white, 1);
        instance_activate_object(obj_blood);
    with (obj_blood) {
        event_perform(ev_draw, 0);   
    }
    instance_deactivate_object(obj_blood);
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(font0);
if(state == 0) { // Starting screen
    draw_set_color(merge_color(c_red, c_black, 0.8));
    draw_set_alpha(0.75);
    draw_rectangle(0, 0, display_get_width(), display_get_height(), false);
    
    var str = "Press &lt;ANY&gt; key to start";
    draw_set_color(c_white);
    draw_set_alpha(1.0);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text(display_get_width() * 0.5, display_get_height() * 0.5 , str);
}
else if(state == 1) { // Wawe in progress
    draw_set_color(c_white);
    draw_set_alpha(1.0);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_text_transformed(20, 0, "Wave: " + string(wave_current) + "#Enemies left: " + string(wave_enemy_count + instance_number(obj_clown)) + "#"+string(instance_number(obj_ammo_pickup)), 0.5, 0.5, 0.0);   
}
else if(state == 2) { // Countdown
    draw_set_color(merge_color(c_red, c_black, 0.8));
    draw_set_alpha((1.0 - (state_timer / (room_speed * 3))) * 0.75);
    draw_rectangle(0, 0, display_get_width(), display_get_height(), false);
    
    var str = string(3 - floor(state_timer / room_speed));
    draw_set_color(c_white);
    draw_set_alpha(1.0);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text(display_get_width() * 0.5, display_get_height() * 0.5 , str);
    
    draw_set_alpha(1.0);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_text_transformed(20, 0, "Wave incomming...", 0.5, 0.5, 0.0);   
}
else if(abs(state) == 4) { // Game over
    draw_set_color(merge_color(c_red, c_black, 0.8));
    draw_set_alpha((state_timer / (room_speed * 2)) * 0.75);
    draw_rectangle(0, 0, display_get_width(), display_get_height(), false);
    
    var str = "Game over!";
    if(state &lt; 0) str += "#Press &lt;ANY&gt; key to start";
    draw_set_color(c_white);
    draw_set_alpha(1.0);
    draw_set_halign(fa_center);
    draw_set_valign(fa_top);
    draw_text(display_get_width() * 0.5, display_get_height() * 0.25, str);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!surface_exists(sf_light)) sf_light = surface_create(room_width, room_height);

surface_set_target(sf_light);
    draw_clear(c_black);
    draw_set_blend_mode(bm_add);
        with (obj_spotlight) {
            event_perform(ev_draw, 0);
        }
        with (obj_player) {
            draw_sprite_ext(spr_player_light, 0, x, y, 1, 1, 0, merge_color(c_black, $555555, light_intensity), 1);
        }
    draw_set_blend_mode(bm_normal);
    //draw_clear(c_white); // TODO: Remove.
surface_reset_target();

draw_background(bg_1, 0, 0);

//draw_sprite_ext(spr_collision_static, 0, 0, 0, 1, 1, 0, c_white, 0.3);

draw_set_blend_mode_ext(bm_dest_color, bm_zero);
    draw_surface(sf_light, 0, 0);
draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
