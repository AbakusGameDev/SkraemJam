<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_clown</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_collision_character</parentName>
  <maskName>spr_clown_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>goal_x = room_width * 0.5;
goal_y = room_height * 0.5;

image_angle = point_direction(x, y, room_width * 0.5, room_height * 0.5);

speed = 0;

player_seen = noone;
player_seen_timer = 0;

stuck_timer = 0;

dying_timer = 0;

move_speed = 1;

move_collision_radius = 25;

out_of_spawn_collision = false;

image_speed = 0;
image_index = irandom(image_number - 1);

dying = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dying) {
    speed = 0;
    repeat (40) add_blood(x + random_range(-100, 100), y + random_range(-100, 100), 0);
    add_blood(x + random_range(-150, 150), y + random_range(-60, 60), 1);
    add_blood(x + random_range(-150, 150), y + random_range(-60, 60), 2);
    add_blood(x + random_range(-150, 150), y + random_range(-60, 60), 3);
    add_blood(x + random_range(-150, 150), y + random_range(-60, 60), 4);
    add_blood(x + random_range(-150, 150), y + random_range(-60, 60), 3);
    add_blood(x + random_range(-150, 150), y + random_range(-60, 60), 4);
    add_blood(x + random_range(-150, 150), y + random_range(-60, 60), 5);
    instance_create(x, y, obj_explosion);
    repeat (50) instance_create(x, y, obj_confetti);
    screenshake();
    with (instance_create(x, y, obj_clown_projectile)) {
        dir = random(2 * pi);
        image_angle = radtodeg(-dir);
        image_index = 0;
    }
    with (instance_create(x, y, obj_clown_projectile)) {
        dir = random(2 * pi);
        image_angle = radtodeg(-dir);
        image_index = 1;
    }
    with (instance_create(x, y, obj_clown_projectile)) {
        dir = random(2 * pi);
        image_angle = radtodeg(-dir);
        image_index = 2;
    }
    instance_destroy();
} else {
    var minimum = 1000000;
    
    with (obj_player) {
        if (!collision_line(other.x, other.y, x, y, obj_collision_parent, true, false) &amp;&amp; alive) {
            if (point_distance(other.x, other.y, x, y) &lt; minimum) {
                minimum = point_distance(other.x, other.y, x, y);
                other.player_seen = id;
                other.player_seen_timer = room_speed * random_range(4, 5);
            }
        }
    }
    
    if (player_seen || player_seen_timer &gt; 0) {
        move_speed = 2;
        
        rotation_speed = 1;
        
        goal_x = player_seen.x;
        goal_y = player_seen.y;
        
        player_seen_timer -= 1;
        
        if (player_seen_timer &lt;= 0) {
            player_seen = noone;
            clown_set_goal();
        }
    } else {
        move_speed = 1;
        
        stuck_timer += 1;
        
        if (stuck_timer &gt; room_speed * 4) {
            clown_set_goal();
            stuck_timer = 0;
        }
        
        if (point_distance(x, y, goal_x, goal_y) &lt; 200) {
            clown_set_goal();
        }
        
        rotation_speed = 0.3;
    }
    
    
    
    if (out_of_spawn_collision) {
        mp_potential_step_object(goal_x, goal_y, move_speed, obj_collision_parent);
        speed = 0;
    } else {
        speed = 1;
        direction = point_direction(x, y, room_width * 0.5, room_height * 0.5);
        if (!place_meeting(x, y, obj_collision_parent)) out_of_spawn_collision = true;
    }
        
    var diff = angle_difference(image_angle, direction);
    image_angle -= diff * 0.1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_collision_character">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>push_other_character();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dying) {
    
}

draw_sprite_ext(sprite_index, image_index, x + irandom_range(-dying * 5, dying * 5), y + irandom_range(-dying * 5, dying * 5), 1, 1, image_angle, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
